"Possible job status"
enum Status {
  AVAILABLE
  DONE
  FAILED
  RUNNING
  RESERVED
}

"""
Larger jobs are computationally more expensive.
"""
enum JobSize {
  SMALL
  LARGE
}

"""
Job computed by an user
"""
type Job {
  """
  Unique identifier
  """
  _id: Int
  """
  compute Properties
  """
  property: Property!
  """
  Input to perform the computation
  """
  settings: String!
  """
  Job status
  """
  status: Status!
  """
  User who es executing the job.
  """
  user: String
  """
  Timestamp=datatime.timestamp()
  """
  schedule_time: Float
  """
  Timestamp=datatime.timestamp()
  """
  report_time: Float
  """
  platform where the job was run: platform.platform()
  """
  platform: String
}

type Property {
  """
  Unique identifier
  """
  _id: Int
  """
  Name to which the property belongs. e.g. Theory level
  """
  collection_name: String!
  """
  Metadata associated to the given property.
  """
  metadata: String!
  """
  Properties values as JSON
  """
  data: String
  """
  Input with which the property was computed encoded as JSON
  """
  input: String
  """
  Metadata in JSON of the large output files stored somewhere else
  """
  large_objects: String
}

type Collection {
  """
  Collection name
  """
  name: String!
  """
  Number of documents in the Collection
  """
  size: Int!
}

type Query {
  """
  Query jobs by status and maximum number of jobs to retrieve
  """
  jobs(
    "One of: AVAILABLE, DONE, FAILED, RUNNING, RESERVED"
    status: Status!
    "Name of the collection where the property is stored"
    collection_name: String!
    "Maximum number of jobs to request"
    max_jobs: Int
  ): [Job!]
  """
  Query all the properties in a given collection
  """
  properties(
    "Name of the collection where the properties are stored"
    collection_name: String!
  ): [Property!]
  """
  Query a single smile's property in a given collection
  """
  property(
    """
    Metadata to look for
    """
    metadata: String!
    "Name of the collection where the property is stored"
    collection_name: String!
  ): Property
  """
  Ask for the names of all collections
  """
  collections: [Collection!]
}
